name: Test packages


on:
  push:
    branches: ['main']
  pull_request:


jobs:
  unittest-backend:
    name: Unit tests (backend)
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./backend
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          -p 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m ensurepip
          python -m pip install --upgrade --no-cache-dir pip
          python -m pip install --upgrade --no-cache-dir -r requirements.txt -r requirements.dev.txt
      - name: Migrate DB
        run: |
          DB_DSN=postgresql://postgres@localhost:5432/postgres alembic upgrade head
      - name: Build coverage file
        run: |
          DB_DSN=postgresql://postgres@localhost:5432/postgres pytest --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=my_app_api tests/ | tee pytest-coverage.txt
      - name: Print report
        if: always()
        run: |
          cat pytest-coverage.txt
      - name: Pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        if: github.event_name == 'pull_request'
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          title: Coverage Report
          badge-title: Code Coverage
          hide-badge: false
          hide-report: false
          create-new-comment: false
          hide-comment: false
          report-only-changed-files: false
          remove-link-from-badge: false
          junitxml-path: ./pytest.xml
          junitxml-title: Summary


  linting-backend:
    name: Style tests (backend)
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-python@v2
        with:
          python-version: 3.11
      - uses: isort/isort-action@master
        with:
          requirementsFiles: "requirements.txt requirements.dev.txt"
      - uses: psf/black@stable
      - name: Comment if linting failed
        if: failure() && github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            :poop: Code linting failed, use `black` and `isort` to fix it.


  linting-frontend:
    name: Style tests (frontend)
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install
        run: npm ci
      - name: Check
        run: npm run check
